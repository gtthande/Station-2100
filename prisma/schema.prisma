generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id                          String               @id @default(uuid()) @db.Char(36)
  email                       String               @unique @db.VarChar(255)
  created_at                  DateTime             @default(now()) @db.DateTime(0)
  updated_at                  DateTime             @updatedAt @db.DateTime(0)
  email_confirmed_at          DateTime?            @db.DateTime(0)
  last_sign_in_at             DateTime?            @db.DateTime(0)
  raw_app_meta_data           String?              @db.LongText
  raw_user_meta_data          String?              @db.LongText
  is_super_admin              Boolean              @default(false)
  confirmation_token          String?              @db.VarChar(255)
  recovery_token              String?              @db.VarChar(255)
  email_change_token          String?              @db.VarChar(255)
  email_change                String?              @db.VarChar(255)
  phone                       String?              @db.VarChar(15)
  phone_confirmed_at          DateTime?            @db.DateTime(0)
  phone_change                String?              @db.VarChar(15)
  phone_change_token          String?              @db.VarChar(255)
  confirmed_at                DateTime?            @db.DateTime(0)
  email_change_confirm_status Int                  @default(0) @db.SmallInt
  banned_until                DateTime?            @db.DateTime(0)
  re_authentication_token     String?              @db.VarChar(255)
  re_authentication_sent_at   DateTime?            @db.DateTime(0)
  is_sso_user                 Boolean              @default(false)
  deleted_at                  DateTime?            @db.DateTime(0)
  is_anonymous                Boolean              @default(false)
  encrypted_password          String?              @db.VarChar(255)
  audit_logs                  AuditLog[]
  company_details             CompanyDetails?
  customer_permissions        CustomerPermission[]
  customers                   Customer[]
  inventory_batches           InventoryBatch[]
  inventory_products          InventoryProduct[]
  job_cards                   JobCard[]
  profile_security_logs       ProfileSecurityLog[]
  profile                     Profile?
  rotable_parts               RotablePart[]
  stock_movements             StockMovement[]
  tools                       Tool[]
  user_roles                  UserRole[]

  @@map("users")
}

model Profile {
  id                   String               @id @default(uuid()) @db.Char(36)
  user_id              String?              @unique @db.Char(36)
  email                String               @db.VarChar(255)
  full_name            String?              @db.VarChar(255)
  position             String?              @db.VarChar(255)
  department_id        String?              @db.Char(36)
  is_staff             Boolean              @default(false)
  staff_active         Boolean              @default(true)
  phone                String?              @db.VarChar(20)
  badge_id             String?              @db.VarChar(50)
  profile_image_url    String?              @db.VarChar(500)
  bio                  String?              @db.Text
  created_at           DateTime             @default(now()) @db.DateTime(0)
  updated_at           DateTime             @updatedAt @db.DateTime(0)
  profile_security_log ProfileSecurityLog[]
  user                 User?                @relation(fields: [user_id], references: [id], map: "fk_profiles_user")

  @@map("profiles")
}

model UserRole {
  id         String   @id @default(uuid()) @db.Char(36)
  user_id    String   @db.Char(36)
  role_name  String   @db.VarChar(100)
  created_at DateTime @default(now()) @db.DateTime(0)
  user       User     @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@index([user_id], map: "user_roles_user_id_fkey")
  @@map("user_roles")
}

model CustomRole {
  id          String   @id @default(uuid()) @db.Char(36)
  role_name   String   @unique @db.VarChar(100)
  description String?  @db.Text
  permissions String?  @db.LongText
  created_at  DateTime @default(now()) @db.DateTime(0)
  updated_at  DateTime @updatedAt @db.DateTime(0)

  @@map("custom_roles")
}

model CompanyDetails {
  id           String   @id @default(uuid()) @db.Char(36)
  user_id      String   @unique @db.Char(36)
  company_name String   @db.VarChar(255)
  address      String?  @db.Text
  phone        String?  @db.VarChar(20)
  email        String?  @db.VarChar(255)
  website      String?  @db.VarChar(255)
  created_at   DateTime @default(now()) @db.DateTime(0)
  updated_at   DateTime @updatedAt @db.DateTime(0)
  user         User     @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@map("company_details")
}

model Customer {
  id                   String               @id @default(uuid()) @db.Char(36)
  user_id              String               @db.Char(36)
  name                 String               @db.VarChar(255)
  email                String?              @db.VarChar(255)
  phone                String?              @db.VarChar(20)
  address              String?              @db.Text
  city                 String?              @db.VarChar(100)
  state                String?              @db.VarChar(100)
  zip_code             String?              @db.VarChar(20)
  country              String?              @db.VarChar(100)
  contact_person       String?              @db.VarChar(255)
  tail_number          String?              @db.VarChar(20)
  aircraft_type        String?              @db.VarChar(100)
  notes                String?              @db.Text
  created_at           DateTime             @default(now()) @db.DateTime(0)
  updated_at           DateTime             @updatedAt @db.DateTime(0)
  customer_permissions CustomerPermission[]
  user                 User                 @relation(fields: [user_id], references: [id], onDelete: Cascade)
  job_cards            JobCard[]

  @@index([user_id], map: "customers_user_id_fkey")
  @@map("customers")
}

model CustomerPermission {
  id               String          @id @default(uuid()) @db.Char(36)
  user_id          String          @db.Char(36)
  customer_id      String          @db.Char(36)
  permission_level PermissionLevel
  created_at       DateTime        @default(now()) @db.DateTime(0)
  customer         Customer        @relation(fields: [customer_id], references: [id], onDelete: Cascade)
  user             User            @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@index([customer_id], map: "customer_permissions_customer_id_fkey")
  @@index([user_id], map: "customer_permissions_user_id_fkey")
  @@map("customer_permissions")
}

model InventoryProduct {
  id                String           @id @default(uuid()) @db.Char(36)
  user_id           String           @db.Char(36)
  part_number       String           @db.VarChar(100)
  description       String?          @db.Text
  active            Boolean?         @default(true)
  unit_cost         Decimal          @default(0.00) @db.Decimal(10, 2)
  sale_price        Decimal?         @db.Decimal(10, 2)
  purchase_price    Decimal?         @db.Decimal(10, 2)
  unit_of_measure   String?          @db.VarChar(50)
  minimum_stock     Decimal?         @db.Decimal(10, 2)
  reorder_point     Decimal?         @db.Decimal(10, 2)
  reorder_qty       Decimal?         @db.Decimal(10, 2)
  category          String?          @db.VarChar(100)
  created_at        DateTime         @default(now()) @db.DateTime(0)
  updated_at        DateTime         @updatedAt @db.DateTime(0)
  inventory_batches InventoryBatch[]
  user              User             @relation(fields: [user_id], references: [id], onDelete: Cascade)
  job_card_items    JobCardItem[]
  stock_movements   StockMovement[]

  @@index([user_id], map: "inventory_products_user_id_fkey")
  @@map("inventory_products")
}

model InventoryBatch {
  id                      String           @id @default(uuid()) @db.Char(36)
  user_id                 String           @db.Char(36)
  product_id              String           @db.Char(36)
  batch_number            String           @db.VarChar(100)
  quantity                Int              @default(0)
  unit_cost               Decimal?         @default(0.00) @db.Decimal(10, 2)
  cost_per_unit           Decimal          @default(0.00) @db.Decimal(10, 2)
  received_date           DateTime?        @db.Date
  expiry_date             DateTime?        @db.Date
  status                  BatchStatus      @default(pending)
  approval_status         ApprovalStatus   @default(pending)
  supplier                String?          @db.VarChar(255)
  purchase_date           DateTime?        @db.DateTime(0)
  supplier_invoice_number String?          @db.VarChar(255)
  created_at              DateTime         @default(now()) @db.DateTime(0)
  updated_at              DateTime         @updatedAt @db.DateTime(0)
  product                 InventoryProduct @relation(fields: [product_id], references: [id], onDelete: Cascade, map: "fk_batches_product_v3")
  user                    User             @relation(fields: [user_id], references: [id], onDelete: Cascade)
  job_card_items          JobCardItem[]
  stock_movements         StockMovement[]

  @@index([user_id], map: "inventory_batches_user_id_fkey")
  @@index([product_id], map: "fk_batches_product_v3")
  @@map("inventory_batches")
}

model JobCard {
  id                      String        @id @default(uuid()) @db.Char(36)
  user_id                 String        @db.Char(36)
  customer_id             String?       @db.Char(36)
  customername            String?       @db.VarChar(255)
  aircraft_regno          String?       @db.VarChar(20)
  description             String?       @db.Text
  category                String?       @db.VarChar(100)
  job_status              JobStatus     @default(draft)
  warehouse_a_approved    Boolean       @default(false)
  warehouse_bc_approved   Boolean       @default(false)
  owner_supplied_approved Boolean       @default(false)
  created_at              DateTime      @default(now()) @db.DateTime(0)
  updated_at              DateTime      @updatedAt @db.DateTime(0)
  job_card_items          JobCardItem[]
  customer                Customer?     @relation(fields: [customer_id], references: [id], map: "fk_jobcards_customer_v3")
  user                    User          @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@index([user_id], map: "job_cards_user_id_fkey")
  @@index([customer_id], map: "fk_jobcards_customer_v3")
  @@map("job_cards")
}

model JobCardItem {
  id          String            @id @default(uuid()) @db.Char(36)
  job_card_id String            @db.Char(36)
  product_id  String?           @db.Char(36)
  batch_id    String?           @db.Char(36)
  quantity    Int               @default(1)
  unit_cost   Decimal           @default(0.00) @db.Decimal(10, 2)
  total_cost  Decimal?          @db.Decimal(10, 2)
  remarks     String?           @db.Text
  description String?           @db.Text
  created_at  DateTime          @default(now()) @db.DateTime(0)
  updated_at  DateTime?         @default(now()) @db.DateTime(0)
  job_card    JobCard           @relation(fields: [job_card_id], references: [id], onDelete: Cascade, map: "fk_jci_jobcard_v3")
  product     InventoryProduct? @relation(fields: [product_id], references: [id], map: "fk_jci_product_v3")
  batch       InventoryBatch?   @relation(fields: [batch_id], references: [id])

  @@index([batch_id], map: "job_card_items_batch_id_fkey")
  @@index([job_card_id], map: "fk_jci_jobcard_v3")
  @@index([product_id], map: "fk_jci_product_v3")
  @@map("job_card_items")
}

model RotablePart {
  id                    String                @id @default(uuid()) @db.Char(36)
  user_id               String                @db.Char(36)
  part_number           String                @db.VarChar(100)
  serial_number         String?               @db.VarChar(100)
  manufacturer          String?               @db.VarChar(255)
  description           String?               @db.Text
  status                RotableStatus         @default(serviceable)
  location              String?               @db.VarChar(255)
  hours_since_overhaul  Int                   @default(0)
  cycles_since_overhaul Int                   @default(0)
  last_inspection_date  DateTime?             @db.Date
  next_inspection_date  DateTime?             @db.Date
  created_at            DateTime              @default(now()) @db.DateTime(0)
  updated_at            DateTime              @updatedAt @db.DateTime(0)
  installations         RotableInstallation[]
  user                  User                  @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@index([user_id], map: "rotable_parts_user_id_fkey")
  @@map("rotable_parts")
}

model RotableInstallation {
  id                     String      @id @default(uuid()) @db.Char(36)
  rotable_part_id        String      @db.Char(36)
  aircraft_type          String?     @db.VarChar(100)
  tail_number            String?     @db.VarChar(20)
  position               String?     @db.VarChar(100)
  installed_at           DateTime    @default(now()) @db.DateTime(0)
  removed_at             DateTime?   @db.DateTime(0)
  hours_at_installation  Int         @default(0)
  cycles_at_installation Int         @default(0)
  created_at             DateTime    @default(now()) @db.DateTime(0)
  rotable_part           RotablePart @relation(fields: [rotable_part_id], references: [id], onDelete: Cascade)

  @@index([rotable_part_id], map: "rotable_installations_rotable_part_id_fkey")
  @@map("rotable_installations")
}

model Tool {
  id            String         @id @default(uuid()) @db.Char(36)
  user_id       String         @db.Char(36)
  tool_name     String         @db.VarChar(255)
  tool_number   String?        @db.VarChar(100)
  description   String?        @db.Text
  serial_number String?        @db.VarChar(100)
  active        Boolean?       @default(true)
  location      String?        @db.VarChar(255)
  status        ToolStatus     @default(available)
  created_at    DateTime       @default(now()) @db.DateTime(0)
  updated_at    DateTime       @updatedAt @db.DateTime(0)
  checkouts     ToolCheckout[]
  user          User           @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@index([user_id], map: "tools_user_id_fkey")
  @@map("tools")
}

model ToolCheckout {
  id             String    @id @default(uuid()) @db.Char(36)
  tool_id        String    @db.Char(36)
  user_id        String?   @db.Char(36)
  checked_out_by String    @db.Char(36)
  checked_out_at DateTime  @default(now()) @db.DateTime(0)
  returned_at    DateTime? @db.DateTime(0)
  remarks        String?   @db.Text
  notes          String?   @db.Text
  tool           Tool      @relation(fields: [tool_id], references: [id], onDelete: Cascade)

  @@index([tool_id], map: "tool_checkouts_tool_id_fkey")
  @@map("tool_checkouts")
}

model ExchangeRate {
  id            String   @id @default(uuid()) @db.Char(36)
  from_currency String   @db.VarChar(3)
  to_currency   String   @db.VarChar(3)
  rate          Decimal  @db.Decimal(10, 6)
  date          DateTime @db.Date
  created_at    DateTime @default(now()) @db.DateTime(0)

  @@map("exchange_rates")
}

model AuditLog {
  id         String   @id @default(uuid()) @db.Char(36)
  user_id    String?  @db.Char(36)
  action     String   @db.VarChar(100)
  table_name String?  @db.VarChar(100)
  record_id  String?  @db.Char(36)
  old_values String?  @db.LongText
  new_values String?  @db.LongText
  ip_address String?  @db.VarChar(45)
  user_agent String?  @db.Text
  created_at DateTime @default(now()) @db.DateTime(0)
  user       User?    @relation(fields: [user_id], references: [id])

  @@index([user_id], map: "audit_logs_user_id_fkey")
  @@map("audit_logs")
}

model StockMovement {
  id            String           @id @default(uuid()) @db.Char(36)
  user_id       String           @db.Char(36)
  product_id    String           @db.Char(36)
  batch_id      String?          @db.Char(36)
  movement_type MovementType
  quantity      Int
  reference_id  String?          @db.Char(36)
  unit_cost     Decimal          @default(0.00) @db.Decimal(10, 2)
  reference     String?          @db.VarChar(255)
  notes         String?          @db.Text
  created_at    DateTime         @default(now()) @db.DateTime(0)
  batch         InventoryBatch?  @relation(fields: [batch_id], references: [id])
  product       InventoryProduct @relation(fields: [product_id], references: [id], onDelete: Cascade)
  user          User             @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@index([batch_id], map: "stock_movements_batch_id_fkey")
  @@index([product_id], map: "stock_movements_product_id_fkey")
  @@index([user_id], map: "stock_movements_user_id_fkey")
  @@map("stock_movements")
}

model ProfileSecurityLog {
  id         String   @id @default(uuid()) @db.Char(36)
  user_id    String   @db.Char(36)
  action     String   @db.VarChar(100)
  details    String?  @db.LongText
  ip_address String?  @db.VarChar(45)
  user_agent String?  @db.Text
  created_at DateTime @default(now()) @db.DateTime(0)
  profile_id String?  @db.Char(36)
  profiles   Profile? @relation(fields: [profile_id], references: [id], map: "fk_psl_profile_v2")
  user       User     @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@index([user_id], map: "profile_security_log_user_id_fkey")
  @@index([profile_id], map: "fk_psl_profile_v3")
  @@map("profile_security_log")
}

enum PermissionLevel {
  admin
  manage
  view_full
  view_contact
  view_basic
}

enum BatchStatus {
  pending
  approved
  rejected
}

enum ApprovalStatus {
  pending
  approved
  rejected
}

enum JobStatus {
  draft
  pending
  approved
  active
  completed
  cancelled
}

enum RotableStatus {
  serviceable
  in_service
  repair
  scrapped
}

enum ToolStatus {
  available
  checked_out
  maintenance
  retired
}

enum MovementType {
  in
  out
  transfer
  adjustment
}
